https://help.eclipse.org/latest/index.jsp?topic=%2Forg.eclipse.platform.doc.isv%2Freference%2Fextension-points%2Forg_eclipse_ui_menus.html
https://developer.sabre.com/creating-basic-menu-contributions
import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.PlatformUI;

public class HelloHandler extends AbstractHandler {

	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
	Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();	
	MessageDialog.openInformation(shell, "Hello Handler", "Eclipse says hello through a handler");
		return null;
	}
}

----------

package com.remainsoftware.e3.hello;

import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.part.ViewPart;

public class HelloWorld extends ViewPart {

	public HelloWorld() {
	}

	@Override
	public void createPartControl(Composite parent) {
		Button button = new Button(parent, SWT.PUSH);
		button.setLayoutData(new GridData(SWT.BEGINNING, SWT.CENTER, false, false));
		button.setText("Eclipse E3 Course");
		button.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				MessageDialog.openInformation(parent.getShell(), "Eclipse e3 Course",
						"https://github.com/RemainSoftware/e3");
			}
		});

	}

	@Override
	public void setFocus() {
	}

}

Button button = new Button(parent, SWT.PUSH);
		button.setLayoutData(new GridData(SWT.BEGINNING, SWT.CENTER, false, false));
		button.setText("Eclipse E3 Course");
		button.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				MessageDialog.openInformation(parent.getShell(), "Eclipse e3 Course",
						"https://github.com/RemainSoftware/e3");
			}
		});

https://github.com/RemainSoftware/e3

import java.awt.Composite;

import org.eclipse.ui.part.ViewPart;

public class HelloWorld extends ViewPart {

	public HelloWorld() {
		// TODO Auto-generated constructor stub
	}

	@Override
	public void setFocus() {
        //label.setFocus();
    }
	
	@Override
    public void createPartControl(Composite parent) {
    
    }
}








New baby, kids now: 4

// ===== Code from file PersonInfo.java =====
public class PersonInfo {
   private int numKids;

   public void setNumKids(int setPersonsKids) {
      numKids = setPersonsKids;
   }

   public void incNumKids() {
      numKids = numKids + 1;
   }

   public int getNumKids() {
      return numKids;
   }
}
// ===== end =====

// ===== Code from file CallPersonInfo.java =====
import java.util.Scanner;

public class CallPersonInfo {
   public static void main(String [] args) {
      Scanner scnr = new Scanner(System.in);
      PersonInfo person1 = new PersonInfo();
      int personsKid;

      personsKid = scnr.nextInt();

      person1.setNumKids(personsKid);

      System.out.println("Kids: " + person1.getNumKids());
      System.out.println("New baby, kids now: " + person1.getNumKids());

   }
}
// ===== end =====

Print person1's kids, call the incNumKids() method, and print again, outputting text as below. End each line with a newline.
Sample output for below program with input 3:
Kids: 3


/*
 * generated by Xtext 2.30.0
 */
package org.example.entities.ui.quickfix;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.BadLocationException;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.diagnostics.Diagnostic;
import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.model.edit.IModification;
import static org.eclipse.xtext.EcoreUtil2.*;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.example.entities.validation.EntitiesValidator;

import org.eclipse.xtext.ui.editor.model.edit.*;
import org.example.entities.entities.*;

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
public class EntitiesQuickfixProvider extends DefaultQuickfixProvider {
	

	 @Fix(EntitiesValidator.INVALID_ENTITY_NAME)
	 public void capitalizeEntityNameFirstLetter(Issue issue, 
			 IssueResolutionAcceptor acceptor) {
		 acceptor.accept(issue,
				 "Capitalize first letter", // label "Capitalize first letter of '"
				 issue.getData()[0], // description
				 "Entity.gif", // icon
				 (context)->applyHelper(issue, context)
		);
		 

	 }
	 private void applyHelper(Issue issue, IModificationContext context) throws BadLocationException {
			IXtextDocument xtextDocument = context.getXtextDocument();
			String firstLetter = xtextDocument.get(issue.getOffset(), 1);
			xtextDocument.replace(issue.getOffset(), 1, firstLetter.toUpperCase());
		}
	 
	 @Fix(EntitiesValidator.INVALID_ATTRIBUTE_NAME)
	 public void uncapitalizeAttributeNameFirstLetter(Issue issue
			 ,IssueResolutionAcceptor acceptor) {
		 acceptor.accept(issue,
				 "Uncapitalize first letter", // label
				 "Uncapitalize first letter of '" + issue.getData()[0] + "'", // description
				 "Attribute.gif", // icon
				 (context)->applyHelper1(issue, context)
					);
					 

				 }
	 
	 private void applyHelper1(Issue issue, IModificationContext context) throws BadLocationException {
			IXtextDocument xtextDocument = context.getXtextDocument();
			String firstLetter = xtextDocument.get(issue.getOffset(), 1);
			xtextDocument.replace(issue.getOffset(), 1, firstLetter.toLowerCase());
	}
	 
	 @Fix(Diagnostic.LINKING_DIAGNOSTIC)
	 public void createMissingEntity(Issue issue, IssueResolutionAcceptor acceptor) {
		 acceptor.accept(issue,
			  "Create missing entity",
			  "Create missing entity",
			  "Entity.gif",
			  new ISemanticModification() {
				  public void apply(EObject element, IModificationContext context) {
					  //class org.example.entities.entities.impl.EntityTypeImpl cannot be cast to class org.example.entities.entities.Entity
					  //Entity currentEntity = (Entity) element;
					  EntityType currentEntityType = (EntityType) element;
					  var currentEntityPos = EcoreUtil2.getContainerOfType(element, Entity.class);
					  Model model =  (Model) EcoreUtil2.getRootContainer(element);
					  Model model2 =  (Model) currentEntityPos.eContainer();
					  Entity addedEntity = EntitiesFactory.eINSTANCE.createEntity();
					  try {
						addedEntity.setName(
								context.getXtextDocument().get(issue.getOffset(), issue.getLength())
								);
					} catch (BadLocationException e) {
						e.printStackTrace();
					}
					  model.getEntities()
					  .add(model.getEntities().indexOf(currentEntityPos)+1,addedEntity);
				  }
			});
	}
	 
	 private void applyHelperCreateMissingEntity(Issue issue, IModificationContext context) throws BadLocationException {
//		 var currentEntity = issue.getc
//				 issue.getContainerOfType(Entity)
//				  val model = currentEntity.eContainer as Model
		 
		 IXtextDocument xtextDocument = context.getXtextDocument();
			String firstLetter = xtextDocument.get(issue.getOffset(), 1);
			xtextDocument.replace(issue.getOffset(), 1, firstLetter.toUpperCase());
		}

}

//acceptor.accept(issue,
//"Capitalize first letter", // label "Capitalize first letter of '"
//issue.getData()[0] + "'", // description
//"Entity.gif", // icon
//new IModification() {
//	@Override
//	public void apply(IModificationContext context) throws Exception {
//		applyHelper(issue, context);
//	}
//
//}
//);

//@Fix(EntitiesValidator.INVALID_NAME)
//public void capitalizeName(final Issue issue, IssueResolutionAcceptor acceptor) {
//	acceptor.accept(issue, "Capitalize name", "Capitalize the name.", "upcase.png", new IModification() {
//		public void apply(IModificationContext context) throws BadLocationException {
//			IXtextDocument xtextDocument = context.getXtextDocument();
//			String firstLetter = xtextDocument.get(issue.getOffset(), 1);
//			xtextDocument.replace(issue.getOffset(), 1, firstLetter.toUpperCase());
//		}
//	});
//}

